import XCTest
@testable import BitwiseRotate

final class BitwiseRotateTests: XCTestCase {
    func testExample() {
        XCTAssertEqual(0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001 <<< 10, 0b00000000_00000000_00000000_00000000_00000000_00000000_00000100_00000000)
        XCTAssertEqual(0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001 <<< 0, 0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001)
        XCTAssertEqual(0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_01010101 <<< 23, 0b00000000_00000000_00000000_00000000_00101010_10000000_00000000_00000000)

        XCTAssertEqual(UInt(0b011111111_11111111_11111111_1111111_11111111_11111111_11111111_11111111) <<< 1, UInt(0b111111111_11111111_11111111_1111111_11111111_11111111_11111111_11111110))
        XCTAssertEqual(UInt(0b011111111_11111111_11111111_1111111_11111111_11111111_11111111_11111111) <<< 63, UInt(0b101111111_11111111_11111111_1111111_11111111_11111111_11111111_11111111))

        XCTAssertEqual(UInt32(0b0111_1111_0000_0000_0000_0000_1111_1111) <<< 8, UInt32(0b0000_0000_0000_0000_1111_1111_0111_1111))
        XCTAssertEqual(Int32(0b0000_0000_1111_1111_0111_1111_1111_1111) <<< 16, Int32(0b0111_1111_1111_1111_0000_0000_1111_1111))

        XCTAssertEqual(UInt16(0b00000000_11111111) <<< 4, UInt16(0b00001111_11110000))
        XCTAssertEqual(Int16(0b01100111_01111111) <<< 8, Int16(0b01111111_01100111))

        XCTAssertEqual(UInt8(0b11000111) <<< 5, UInt8(0b1111_1000))
        XCTAssertEqual(Int8(0b0110_0111) <<< 4, Int8(0b0111_0110))
    }

    static var allTests = [
        ("testExample", testExample),
    ]
}
